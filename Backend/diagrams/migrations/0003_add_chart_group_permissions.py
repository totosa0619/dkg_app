# Generated by Django 4.2 on 2023-10-20 17:23

from django.db import migrations

permissions = [
    "pyramid",
    "geoDashboard",
    "geoDashboardV2",
    "pyramid3D",
    "tableWithBar",
    "frameConstructor",
    "listWithBar",
    "decisionTree",
    "tubeTree3D",
    "marqueeBar",
    "serpentinePath",
    "timelineHorizontal",
    "verticalBarDiff",
    "companiesList",
    "companiesListColor",
    "companiesTable",
    "timeLine",
    "tree",
    "treeV2",
    "treeNoDate",
    "netTree",
    "mind_map",
    "custom_table",
    "cube3d",
    "tree3D",
    "pieChart3D",
    "barChart3D",
    "nodeChart3D",
    "globe3D",
    "revolutionCube3D",
    "rectangleMindmap",
    "interactivePanel",
    "interactivePanelColor",
    "number2",
    "number3",
    "number4",
    "number4_5",
    "number5",
    "number6",
    "number7",
    "number8",
    "number9",
    "number10",
    "number11",
    "number12",
    "number13",
    "number14",
    "number15",
    "uk_tube",
    "number16",
    "number17",
    "number18",
    "number18_1",
    "p3d",
    "radarChart",
    "radarGradientChart",
    "stackedBarChart",
    "pentagon3d",
    "documentCreator",
    "documentCreatorV2",
    "comparisonSwots",
    "hexagon",
    "adminbuttons",
    "asiaMap",
    "walesMap",
    "ukmap",
    "UAEmap",
    "europeMap",
    "switzerlandmap",
    "moldovaMap",
    "moldovaMapV2",
    "londonMap",
    "pseudoPyramid",
    "circleInteractive",
    "rectangularInteractive",

    "digitalUK",
    "globalGeomap",
    "USAGeomap",

    "itPlatformsRegistry",
    "completedFrontendRegistery",
    "indevelopmentFrontendRegistery",
    "dashboardsRegistry",
    "mindmapsRegistry",

    "inDevelopment",
    "DatabaseManagementSystem",
    "Dashboards",

    "aiUKDatabase",
    "aiEcosystemDatabase",
    "philantrhropyInternational",
    "hubspotMetrics",
    "googleAnalytics",
    "femtechAnalyticsLinkedin",
    "aiiaSocialMediaAnalytics",
    "aiia",
    "comparativeAnalysisLinkedin",
    "investInUkraineTech",
    "globalAiEcosystem",
    "dataAnalyticsPlatform",

    "currentStateFeedback",
    "suggestFeature",
    "plannedFrontendTools",

    "treesAndPathways",

    "3DSection",
    "hexagonal",

    "comparisonBars",
    "swot3d",
    "Tools",
    "lineChart",
    "verticalBarForGeoMaps",

    "keyIndicator",
    "gaugeChart",
    "forRevision",

    "organizations",
    "Personalities",
    "customEntities",
    "genericIFrames",
    "mindmaps",
    "dashboardTools",
]


def get_permission_name(chart, prefix="view"):
    return f"{prefix}_{chart.lower()}"


def revert_default_permissions(apps, schema_editor):
    Permission = apps.get_model("auth", "Permission")
    view_permissions = []
    for p in permissions:
        view_permissions.append(get_permission_name(p, "view"))
        view_permissions.append(get_permission_name(p, "edit"))
    Permission.objects.filter(codename__in=view_permissions).delete()


def populate_default_permissions(apps, schema_editor):
    ContentType = apps.get_model("contenttypes", "ContentType")
    group_type = ContentType.objects.get(app_label="auth", model="group")
    user_type = ContentType.objects.get(app_label="auth", model="user")
    Permission = apps.get_model("auth", "Permission")
    to_create = []
    for p in permissions:
        to_create.append(Permission(
            content_type=group_type,
            codename=get_permission_name(p, "view"),
            name=f"view - ({p.lower()})",
        ))
        to_create.append(Permission(
            content_type=group_type,
            codename=get_permission_name(p, "edit"),
            name=f"edit - ({p.lower()})",
        ))
        to_create.append(Permission(
            content_type=user_type,
            codename=get_permission_name(p, "view"),
            name=f"view - ({p.lower()})",
        ))
        to_create.append(Permission(
            content_type=user_type,
            codename=get_permission_name(p, "edit"),
            name=f"edit - ({p.lower()})",
        ))

    Permission.objects.bulk_create(to_create)


class Migration(migrations.Migration):
    dependencies = [
        ('diagrams', '0002_alter_diagramframe_updated_user_name'),
    ]

    operations = [
        migrations.RunPython(populate_default_permissions, revert_default_permissions),
    ]
